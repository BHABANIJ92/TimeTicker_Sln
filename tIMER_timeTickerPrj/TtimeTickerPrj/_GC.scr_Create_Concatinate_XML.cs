using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Xml;

namespace Dynamic.Script_8D6C8275A7D90DA
{
    // Script generated by Pega Robotics Studio 8.0.2003.0
    // Please use caution when modifying class name, namespace or attributes
    [OpenSpan.TypeManagement.DynamicTypeAttribute()]
    [OpenSpan.Design.ComponentIdentityAttribute("Script-8D6C8275A7D90DA")]
    public sealed class Script
    {
        public void Concatenatestring(string label1, string Text1, string label2, string Text2, string label3, string Text3, string label4, string Text4, string label5, string Text5, string label6, string Text6, string label7, string Text7, string label8, string Text8, string label9, string Text9, string label10, string Text10, string label11, string Text11, string label12, string Text12, string label13, string Text13, string label14, string Text14, string label15, string Text15, string label16, string Text16, string label17, string Text17, string label18, string Text18, string label19, string Text19, string label20, string Text20, string label21, string Text21,
        string label22, string Text22, string label23, string Text23, string label24, string Text24, string label25, string Text25, string label26, string Text26, string label27, string Text27, string label28, string Text28, string label29, string Text29, string label30, string Text30, string label31, string Text31, string label32, string Text32, string label33, string Text33, string label34, string Text34, string label35, string Text35, string label36, string Text36, string label37, string Text37, string label38, string Text38, string label39, string Text39, string label40, string Text40, string label41, string Text41, string label42, string Text42,
        string label43, string Text43, string label44, string Text44, string label45, string Text45, string label46, string Text46, string label47, string Text47, string label48, string Text48, string label49, string Text49, string label50, string Text50, string label51, string Text51, string label52, string Text52, string label53, string Text53, string label54, string Text54, string label55, string Text55, string label56, string Text56, string label57, string Text57, string label58, string Text58, string label59, string Text59, string label60, string Text60, string label61, string Text61, string label62, string Text62, string label63, string Text63, string label64, string Text64, string label65, string Text65, string label66, string Text66, out string ConcatenatedString)
        {
            // concatinating the strigyng
            ConcatenatedString = label1 + "?" + Text1 + "||" + label2 + "?" + Text2 + "||" + label3 + "?" + Text3 + "||" + label4 + "?" + Text4 + "||" + label5 + "?" + Text5 + "||" + label6 + "?" + Text6 + "||" + label7 + "?" + Text7 + "||" + label8 + "?" + Text8 + "||" + label9 + "?" + Text9 + "||" + label10 + "?" + Text10 + "||" + label11 + "?" + Text11 + "||" + label12 + "?" + Text12 + "||" + label13 + "?" + Text13 + "||" + label14 + "?" + Text14 + "||" + label15 + "?" + Text15 + "||" + label16 + "?" + Text16 + "||" + label17 + "?" + Text17 + "||" + label18 + "?" + Text18 + "||" + label19 + "?" + Text19 + "||" + label20 + "?" + Text20 + "||" + label21 + "?" + Text21 + "||"
            + label22 + "?" + Text22 + "||" + label23 + "?" + Text23 + "||" + label24 + "?" + Text24 + "||" + label25 + "?" + Text25 + "||" + label26 + "?" + Text26 + "||" + label27 + "?" + Text27 + "||" + label28 + "?" + Text28 + "||" + label29 + "?" + Text29 + "||" + label30 + "?" + Text30 + "||" + label31 + "?" + Text31 + "||" + label32 + "?" + Text32 + "||" + label33 + "?" + Text33 + "||" + label34 + "?" + Text34 + "||" + label35 + "?" + Text35 + "||" + label36 + "?" + Text36 + "||" + label37 + "?" + Text37 + "||" + label38 + "?" + Text38 + "||" + label39 + "?" + Text39 + "||" + label40 + "?" + Text40 + "||" + label41 + "?" + Text41 + "||" + label42 + "?" + Text42 + "||"
            + label43 + "?" + Text43 + "||" + label44 + "?" + Text44 + "||" + label45 + "?" + Text45 + "||" + label46 + "?" + Text46 + "||" + label47 + "?" + Text47 + "||" + label48 + "?" + Text48 + "||" + label49 + "?" + Text49 + "||" + label50 + "?" + Text50 + "||" + label51 + "?" + Text51 + "||" + label52 + "?" + Text52 + "||" + label53 + "?" + Text53 + "||" + label54 + "?" + Text54 + "||" + label55 + "?" + Text55 + "||" + label56 + "?" + Text56 + "||" + label57 + "?" + Text57 + "||" + label58 + "?" + Text58 + "||" + label59 + "?" + Text59 + "||" + label60 + "?" + Text60 + "||" + label61 + "?" + Text61 + "||" + label62 + "?" + Text62 + "||" + label63 + "?" + Text63 + "||" + label64 + "?" + Text64 + "||" + label65 + "?" + Text65 + "||" + label66 + "?" + Text66;
        }
        public void CreateXML(string CommonNode, DataTable RepeatNode, out string strXmlText)
        {
            strXmlText = string.Empty;
            string[] splitxml1 = new string[] { "?" };
            string[] splitspace = new string[] { " " };
            ////MessageBox.Show("Hi " + CommonNode);
            try
            {
                // split the values using key,value pair
                string[] splitxml = new string[] { "||" };
                string[] Keys = CommonNode.Split(splitxml, StringSplitOptions.None);
                XmlDocument oXmlDocument = new XmlDocument();
                //XmlNode oXmlChildNode= new XmlNode();
                XmlNode docNode = oXmlDocument.CreateXmlDeclaration("1.0", "UTF-8", null);
                oXmlDocument.AppendChild(docNode);
                XmlNode oXmlRootNode = oXmlDocument.CreateElement("records");
                oXmlDocument.AppendChild(oXmlRootNode);
                XmlNode oXmlRecordNode = oXmlRootNode.AppendChild(
                oXmlDocument.CreateNode(XmlNodeType.Element, "record", ""));
                foreach (string Key in Keys)
                {

                    //MessageBox.Show(Key);

                    string[] Values = Key.Split(splitxml1, StringSplitOptions.None);
                    string[] keyNode = Values[0].ToString().Split(splitspace, StringSplitOptions.None);

                    string strKeyNode = string.Empty;
                    foreach (var nItem in keyNode)
                    {
                        strKeyNode = strKeyNode + nItem;
                    }

                    //MessageBox.Show("KeyNode: "+ strKeyNode);
                    //Dynamically creating child nodes
                    oXmlRecordNode.AppendChild(oXmlDocument.CreateNode(XmlNodeType.Element,
                    strKeyNode, "")).InnerText = Values[1];

                }
                if (RepeatNode.Rows.Count > 0)
                {
                    XmlNode oXmlChildNodes = oXmlRootNode.AppendChild(
                    oXmlDocument.CreateNode(XmlNodeType.Element, "input", ""));

                    for (int M = 0; M < RepeatNode.Rows.Count; M++)
                    {


                        for (int i = 0; i < RepeatNode.Columns.Count; i++)
                        {
                            string[] keyNode = RepeatNode.Columns[i].ColumnName.ToString().Split(splitspace, StringSplitOptions.None);

                            string strKeyNode = string.Empty;
                            foreach (var nItem in keyNode)
                            {
                                strKeyNode = strKeyNode + nItem;
                            }

                            oXmlChildNodes.AppendChild(oXmlDocument.CreateNode(XmlNodeType.Element,
                            strKeyNode, "")).InnerText = RepeatNode.Rows[M].ItemArray[i].ToString();


                            // Console.Write(RepeatNode.Columns[i].ColumnName + " ");    
                            // Console.WriteLine(RepeatNode.Rows[j].ItemArray[i]+" "); 
                        }


                    }

                }


                // Converting XML to String
                using (StringWriter sw = new StringWriter())
                {
                    using (XmlTextWriter tx = new XmlTextWriter(sw))
                    {
                        oXmlDocument.WriteTo(tx);
                        strXmlText = sw.ToString();
                    }
                }

                //MessageBox.Show(strXmlText);
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.ToString());
            }
        }

        public DataTable DtView(string XmL)
        {
            DataSet ds = new DataSet();
            //Reading the XML string and converting to Datatable.
            ds.ReadXml(new XmlTextReader(new StringReader(XmL)));
            DataTable dt = ds.Tables[0];

            //MessageBox.Show(ds.Tables[1].ToString());
            return dt;

        }

        public DataTable CreateDT()
        {
            DataTable dt = new DataTable();
            return dt;
        }
        public void AddColumnsInDT(string label1, string label2, DataTable dt)
        {
            dt.Columns.Add(label1);
            dt.Columns.Add(label2);
            //dt.Columns.Add(label3);
            //return dt;
        }
        public void AddRowsInDT(string Text1, string Text2, DataTable dt)
        {
            dt.Rows.Add(Text1, Text2);

        }
    }
}
